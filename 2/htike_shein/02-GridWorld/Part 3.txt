Set 3

1. I would use loc1.getRow()
2. False
3. loc3 would be at row 4 column 4.
4. It would be 135.
5. The method returns one square ahead in that direction.

Set 4
1. To get all the objects on a grid, I would just run "getOccupiedLocations.size()".
2. I would run isValid(new Location(10,10)).
3. Grid is an interface, and as such, cannot implement methods. The methods are found in classes BoundedGrid and UnboundedGrid.
4. ArrayList is a more practical medium. It is must easier to manipulate so using it is better design.

Set 5
1. Each actor has a color, direction and location.
2. The default actor faces north and is blue.
3. All actors will perform actor methods the same way.
4. An actor cannot put itself into a grid twice unless it removes itself after putting itself into a grid the first time.
5. You would tell the actor to run setDirection(getDirection() + Location.RIGHT).

Set 6
1. " if (!gr.isValid(next)) return false;"
2. "return (neighbor == null) || (neighbor instanceof Flower);"
3. canMove() uses isValid() to check if a location is in the grid or not.
4. It uses getAdjacentLocation() to determine which square is ahead.
5. It uses getGrid() which is inhereted from Actor.
6. If a bug is asked to move out of the grid, it removes itself from the grid.
7. loc needs to be made in order to remember the previous square the bug was in so that a flower can be placed there.
8. The line "Flower flower = new Flower(getColor());" makes it so.
9. It will still do so.
10. "flower.putSelfInGrid(gr, loc);" does this.
11. It should turn() eight times.

Group Activity
1a. It should be unable to move.
 b. It should turn clockwise until it does not face the edge of the grid.
 c. It should move forward unless it is asked to move out of the grid. Then it should turn clockwise until it can move again.
 d. It should turn clockwise until it can jump.
 e. If a jumper is in that spot, it should turn clockwise.
 f. The jumper requires no other tests.
2a. Jumper should extend Bug.
 b. Bug is similar to Jumper.
 c. The constructor needs the variable of color.
 d. move() and canmove() should be overwritten.
 e. No methods need adding.
 f. An obstacle course is laid out for jumper and it should be able to perform as required.