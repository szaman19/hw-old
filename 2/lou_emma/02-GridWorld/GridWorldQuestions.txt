Emma Lou

SET 1
1) It "moves" to a "new location" but if the bug doesn't hit a rock, it continues on the same path. After it hits a rock and there are no more obstacles, it continues on the same path.
2) The bug goes in a CCW direction and turns 45 degrees
3) It spins REALLLLLL fast. 
4) It leaves a trail of flowers on stars, and the color turns darker when the bug isn't on the tile. 
5) The bug continues to turn 45 degrees until it faces a tile that doesn't have an obstacle. (90 degrees)
6) The bug turns 45 degrees CCW and continues on a diagonal.
7) Nope!!
8) It turns darker until the bug passes it again. 
9) Nope!! 
10) Nope!!

SET 2
1) Sidelength is the boundary length
2) Steps is the number of steps the bug takes before hitting the edge
3) The bug turns 45 degrees. When the bug hits the edge (steps=sidelength), it needs to turn 90 degrees in order to step on a free tile. 
4) BoxBug is extended from Bug, which has a move method. Since BoxBug didn't overwrite Bug's move method, it automatically inherits it.
5) It will always stay the same because sidelength stays the same.
6) The path the BoxBug takes can change if there is a rock/another bug in its way. It cannot go over these obstacles, and must make a new path.
7) Steps will become 0 when the bug can't move straight anymore, or if it reaches sideLength.

SET 2 EXERCISES
1) import info.gridworld.actor.Bug;
public class CircleBug extends Bug {
    private int steps;
    private int sideLength;

    public CircleBug(int length) {
        steps = 0;
        sideLength = length;
    }

    public void act() {
        if (steps < sideLength && canMove()){
            move();
            steps++;
        }
        else {
            turn();
            steps = 0;
        }
    }
}

Turning once means the bug only turns 45 degrees as opposed to 90. When its steps=sideLength, it'll turn 45 degrees. If this continues, the bug will create a circle shape.

2) import info.gridworld.actor.Bug;
public class SpiralBug extends Bug {
    private int steps;
    private int sideLength;

    public SpiralBug(int length) {
        steps = 0;
        sideLength = length;
    }

    public void act() {
        if (steps < sideLength && canMove()){
            move();
            steps++;
        }
        else {
            turn();
			turn();
			sideLength = sideLength + 1;
            steps = 0;
        }
    }
}

3) import info.gridworld.actor.Bug;
public class ZBug extends Bug {
    private int steps;
    private int sideLength;

    public ZBug(int length) {
        steps = 0;
        sideLength = length;
		setDirection(90);
    }
	
	public void moving(){
	  if (steps < sideLength && canMove()){
            move();
            steps++;
        }
        else {
			if (canMove()){
				sideLength = sideLength + 1;
            	steps = 0;
        	}
		}
	}

    public void act() {
      moving();
	  setDirection(225);
	  moving();
	  setDirection(90);
	  moving();
    }
}

4) import info.gridworld.actor.Bug;
public class DancingBug extends Bug{
	private turning;
	private current;
	
	public DancingBug(int[] turns){
		turning = turns;
		current = 0;
	}
	
	public void act(){
		if (current = turning.length()){
			current = 0;			
		}
		for (int i = 0; i < turning[current]; i++){
			turn();
		}
		current = current + 1;
		super.act();
	}
}


2014-02-24

PART III
Group Questions

1. 
	a) Jumper should turn 90 degrees to the right if it's a rock; jump if it's a flower.
	b) Jumper should turn 90 degrees to the right. 
	c) Jumper should turn 90 degrees to the right.
	d) Jumper should take one step, then proceed to jump over the actor.
	e) Both jumpers should jump.  
	f) -If there are multiple adjacent rocks.
	   -If two jumpers jump on the same spot.
2. 
	a) Jumper should extend Actor
	b) The Bug class is similar.
	c) Parameter should include the Jumper's Color
	d) Act, turn
	e) Move, canMove
	f) Surround the jumperwith flowers, rocks, other actors, etc. 
3. 
package info.gridworld.actor;
import info.gridworld.grid.Grid;
import info.gridworld.grid.Location;
import java.awt.Color;

public class Jumper extends Actor {
    public Jumper() {
        setColor(Color.RED);
    }

    public Jumper(Color bugColor) {
        setColor(bugColor);
    }

    public void act() {
        if (canMove())
            move();
        else
            turn();
    }
	
	public void turn() {
        setDirection(getDirection() + Location.RIGHT);
    }
	
	public void move() {
        Grid<Actor> gr = getGrid();
        if (gr == null)
            return;
        Location loc = getLocation();
        Location next = loc.getAdjacentLocation(getDirection());
		Location nextx2 = next.getAdjacentLocation(getDirection());
        if (gr.isValid(nextx2))
            moveTo(nextx2);
        else
            removeSelfFromGrid();
        Flower flower = new Flower(getColor());
        flower.putSelfInGrid(gr, loc);
    }
	
	 public boolean canMove() {
        Grid<Actor> gr = getGrid();
        if (gr == null)
            return false;
        Location loc = getLocation();
        Location next = loc.getAdjacentLocation(getDirection());
		Location nextx2 = next.getAdjacentLocation(getDirection());
        if (!gr.isValid(nextx2))
            return false;
        Actor neighbor = gr.get(nextx2);
        return (neighbor == null) || (neighbor instanceof Flower);
    }
 
}
*********************************************************************************
import info.gridworld.actor.ActorWorld;
import info.gridworld.actor.Bug;
import info.gridworld.actor.Rock;

public class JumperRunner
{
    public static void main(String[] args)
    {
        ActorWorld world = new ActorWorld();
        world.add(new Jumper());
        world.add(new Rock());
        world.show();
    }
}
