import java.util.*;
public class BinarySearch {
	public static int find(int x, int[] a){
		int lo = 0;
		int hi = a.length - 1;
		while(lo <= hi){
			int mid = (lo + hi) / 2;
			if(a[mid] == x) return mid;
			else if(a[mid] < x) lo = mid+1;
			else if(a[mid] > x) hi = mid-1;
		}
		return -1;
	}
	public static int findInsertionSpot(int x, int[] a, int start, int end){
		int lo = start;
		int hi = end - 1;
		while(lo <= hi){
			int mid = (lo + hi) / 2;
			if(a[mid] == x) return mid;
			else if(a[mid] < x) lo = mid+1;
			else if(a[mid] > x) hi = mid-1;
		}
		return lo;
	}
	public static int findInsertionSpot(int x, int[] a){
		return findInsertionSpot(x,a,0,a.length);
	}
	public static int find(Comparable x,ArrayList<Comparable> a){
		int lo = 0;
		int hi = a.size() - 1;
		while(lo <= hi){
			int mid = (lo + hi) / 2;
			Comparable val = a.get(mid);
			if(val.equals(x)) return mid;
			else if(val.compareTo(x) < 0) lo = mid+1;
			else if(val.compareTo(x) > 0) hi = mid-1;
		}
		return -1;
	}
	public static int findInsertionSpot(Comparable x,ArrayList<Comparable> a, int start, int end){
		int lo = start;
		int hi = end - 1;
		while(lo <= hi){
			int mid = (lo + hi) / 2;
			Comparable val = a.get(mid);
			if(val.equals(x)) return mid;
			else if(val.compareTo(x) < 0) lo = mid+1;
			else if(val.compareTo(x) > 0) hi = mid-1;
		}
		return lo;
	}
	public static int findInsertionSpot(Comparable x,ArrayList<Comparable> a){
		return findInsertionSpot(x,a,0,a.size());
	}
	public static void main(String[] args){
		ArrayList<Integer> a = new ArrayList<Integer>();
		a.add(-20);
		a.add(7);
		a.add(8);
		a.add(100);
		System.out.println(findInsertionSpot(23,a));
	}
}
